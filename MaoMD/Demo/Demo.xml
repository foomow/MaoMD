<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Demo</name>
    </assembly>
    <members>
        <member name="T:Demo.Author">
            <summary>
            a attribute
            </summary>
        </member>
        <member name="F:Demo.Author.name">
            <summary>
            the name of author
            </summary>
        </member>
        <member name="F:Demo.Author.version">
            <summary>
            version
            </summary>
        </member>
        <member name="M:Demo.Author.#ctor(System.String)">
            <summary>
            author constructor
            </summary>
            <param name="name">input name</param>
        </member>
        <member name="T:Demo.DemoClass">
            <summary>
            Demo Class
            </summary>
        </member>
        <member name="T:Demo.DemoClass.d_a">
            <summary>
            a delegate
            </summary>
            <param name="msg">msg parameter</param>
            <returns>int value</returns>
        </member>
        <member name="F:Demo.DemoClass._id">
            <summary>
            id field
            </summary>
        </member>
        <member name="M:Demo.DemoClass.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="id">id 初始化值</param>
        </member>
        <member name="P:Demo.DemoClass.Id">
            <summary>
            property Id
            </summary>
        </member>
        <member name="T:Demo.WeekDay">
            <summary>
            an enum type
            </summary>
        </member>
        <member name="F:Demo.WeekDay.Sun">
            <summary>
            sunday
            </summary>
        </member>
        <member name="F:Demo.WeekDay.Mon">
            <summary>
            monday
            </summary>
        </member>
        <member name="F:Demo.WeekDay.Tue">
            <summary>
            tuesday
            </summary>
        </member>
        <member name="F:Demo.WeekDay.Wed">
            <summary>
            wedensday
            </summary>
        </member>
        <member name="F:Demo.WeekDay.Thu">
            <summary>
            thurseday
            </summary>
        </member>
        <member name="F:Demo.WeekDay.Fri">
            <summary>
            friday
            </summary>
        </member>
        <member name="F:Demo.WeekDay.Sat">
            <summary>
            saturday
            </summary>
        </member>
        <member name="T:Demo.GClass`3">
            <summary>
            g class
            </summary>
            <typeparam name="T">tp 0</typeparam>
            <typeparam name="T1">tp 1</typeparam>
            <typeparam name="T2">tp 2</typeparam>
        </member>
        <member name="F:Demo.GClass`3.q">
            <summary>
            a queue
            </summary>
        </member>
        <member name="M:Demo.GClass`3.#ctor(System.Int32)">
            <summary>
            default ctor
            </summary>
            <param name="i">param i</param>
        </member>
        <member name="T:Demo.NewClass">
            <summary>
            a new class,
            we use it to test
            how to make this 
            </summary>
            <remarks>
            this is remarks content
            </remarks>
            <seealso cref="T:Demo.DemoClass"/>
            <seealso cref="T:Demo.subns.ImpClass"/>
        </member>
        <member name="F:Demo.NewClass._id">
            <summary>
            a field
            </summary>
        </member>
        <member name="M:Demo.NewClass.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="id">input id</param>
        </member>
        <member name="P:Demo.NewClass.Id">
            <summary>
            a property
            </summary>
        </member>
        <member name="M:Demo.NewClass.Afun">
            <summary>
            this is a function
            </summary>
            <returns>return a string</returns>
            <remarks>some remarks</remarks>
        </member>
        <member name="T:Demo.Date">
            <summary>
            a struct
            </summary>    
        </member>
        <member name="F:Demo.Date.year">
            <summary>
            year
            </summary>
        </member>
        <member name="F:Demo.Date.month">
            <summary>
            month
            </summary>
        </member>
        <member name="F:Demo.Date.day">
            <summary>
            day
            </summary>
        </member>
        <member name="T:Demo.subns.SubClass">
            <summary>
            Class within sub namespace
            </summary>
        </member>
        <member name="F:Demo.subns.SubClass.id">
            <summary>
            an id private field member
            </summary>
        </member>
        <member name="P:Demo.subns.SubClass.Id">
            <summary>
            an Id property member
            </summary>
        </member>
        <member name="T:Demo.subns.SubClass.nestedclass">
            <summary>
            a nested class
            </summary>
        </member>
        <member name="F:Demo.subns.SubClass.nestedclass.name">
            <summary>
            some name
            </summary>
        </member>
        <member name="T:Demo.subns.ImpClass">
            <summary>
            a class implements an interface
            </summary>
        </member>
        <member name="P:Demo.subns.ImpClass.comment">
            <summary>
            内容
            </summary>
        </member>
        <member name="T:Demo.subns.subsubns.IDemo">
            <summary>
            a demo interface
            </summary>
        </member>
        <member name="P:Demo.subns.subsubns.IDemo.comment">
            <summary>
            some property
            </summary>
        </member>
        <member name="T:Demo.subns.TestClass">
            <summary>
            test class
            </summary>
        </member>
        <member name="F:Demo.subns.TestClass._name">
            <summary>
            a private field
            </summary>
        </member>
        <member name="P:Demo.subns.TestClass.Name">
            <summary>
            a property
            </summary>
        </member>
        <member name="M:Demo.subns.TestClass.TestMethod">
            <summary>
            test method in test class
            </summary>
            <returns>an interger value</returns>
        </member>
        <member name="T:Demo.subns.TestStruct">
            <summary>
            a test value type
            </summary>
        </member>
        <member name="F:Demo.subns.TestStruct.x">
            <summary>
            member x
            </summary>
        </member>
        <member name="F:Demo.subns.TestStruct.y">
            <summary>
            member y
            </summary>
        </member>
        <member name="T:Demo.TestA">
            <summary>
            TestA
            </summary>
        </member>
        <member name="F:Demo.TestA.a">
            <summary>
            a gclass
            </summary>
        </member>
        <member name="F:Demo.TestA.aaa">
            <summary>
            aaa class
            </summary>
        </member>
        <member name="F:Demo.TestA.fooc">
            <summary>
            const fiele
            </summary>
            <remarks>haha</remarks>
        </member>
        <member name="F:Demo.TestA.foob">
            <summary>
            readonly fiele
            </summary>
            <remarks>
            haha
            </remarks>
        </member>
        <member name="F:Demo.TestA.foo">
            <summary>
            a foo value
            </summary>
        </member>
        <member name="M:Demo.TestA.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="id">input value</param>
        </member>
        <member name="P:Demo.TestA.Foo">
            <summary>
            inherited value
            </summary>
        </member>
        <member name="P:Demo.TestA.tick">
            <summary>
            a implementation of tick
            </summary>
        </member>
        <member name="M:Demo.TestA.DoWork">
            <summary>
            a work
            </summary>
            <returns>back message</returns>
        </member>
        <member name="M:Demo.TestA.IsTest(Demo.subns.TestStruct)">
            <summary>
            test message
            </summary>
            <param name="value">a struct</param>
            <returns>is it ok</returns>
        </member>
        <member name="M:Demo.TestA.set_Foo(Demo.WeekDay)">
            <summary>
            test set method
            </summary>
        </member>
        <member name="M:Demo.TestA.DoJob(Demo.subns.SubClass,System.Int32,System.String)">
            <summary>
            static method
            </summary>
            <param name="sclass">p0</param>
            <param name="a">p1</param>
            <param name="b">p2</param>
            <returns>a test calss</returns>
        </member>
        <member name="M:Demo.TestA.Afun">
            <summary>
            override method
            </summary>
            <returns>a string</returns>
        </member>
        <member name="M:Demo.TestA.pmethod">
            <summary>
            protected method
            </summary>
            <returns>an int</returns>
        </member>
        <member name="M:Demo.TestA.GetNameOfType``2(System.Boolean)">
            <summary>
            method with type parameters
            </summary>
            <typeparam name="T">the typeparameter</typeparam>
            <typeparam name="T1">another typeparameter</typeparam>
            <param name="fullname">test parameter</param>
            <returns>string return value</returns>
        </member>
        <member name="M:Demo.testns.ClassS.toIn(System.String,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            sss
            </summary>
            <param name="str">sss</param>
            <param name="f_r">rrr</param>
            <param name="f_in">iii</param>
            <param name="f_out">ooo</param>
        </member>
        <member name="T:Demo.testns.MyClass">
            <summary>
            a class
            </summary>
        </member>
        <member name="F:Demo.testns.MyClass.testvalue">
            <summary>
            a testvalue
            </summary>
        </member>
        <member name="F:Demo.testns.MyClass.pubv">
            <summary>
            a public value
            </summary>
        </member>
        <member name="F:Demo.testns.MyClass.priv">
            <summary>
            a private value
            </summary>
        </member>
        <member name="F:Demo.testns.MyClass.intv">
            <summary>
            a internal value
            </summary>
        </member>
        <member name="M:Demo.testns.MyClass.#ctor">
            <summary>
            constractor
            </summary>
        </member>
    </members>
</doc>
