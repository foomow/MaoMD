<?xml version="1.0"?>
<doc>
    <assembly>
        <name>maomdlib</name>
    </assembly>
    <members>
        <member name="T:maomdlib.ConsoleLogger">
            <summary>
            a logger for console
            </summary>
        </member>
        <member name="T:maomdlib.ConsoleLogger.MESSAGE">
            <summary>
            a struct for messages
            </summary>
        </member>
        <member name="F:maomdlib.ConsoleLogger._messagePool">
            <summary>
            message queue
            </summary>
        </member>
        <member name="F:maomdlib.ConsoleLogger._exit">
            <summary>
            exit trigger
            </summary>
        </member>
        <member name="F:maomdlib.ConsoleLogger._logThread">
            <summary>
            the thread for logging
            </summary>
        </member>
        <member name="F:maomdlib.ConsoleLogger._minLogLevel">
            <summary>
            the minimize level for logging
            </summary>
        </member>
        <member name="P:maomdlib.ConsoleLogger.MinLogLevel">
            <summary>
            the minimize level for logging
            </summary>
        </member>
        <member name="M:maomdlib.ConsoleLogger.#ctor(maomdlib.LogLevel)">
            <summary>
            constructor
            </summary>
            <param name="minLogLevel">the minimize level for logging</param>
        </member>
        <member name="M:maomdlib.ConsoleLogger.LogProcess">
            <summary>
            the thread for logging
            </summary>
        </member>
        <member name="M:maomdlib.ConsoleLogger.Critical(System.String,System.Object[])">
            <summary>
            log logic for critical
            </summary>
            <param name="format">format</param>
            <param name="args">args</param>
        </member>
        <member name="M:maomdlib.ConsoleLogger.Debug(System.String,System.Object[])">
            <summary>
            log logic for Debug
            </summary>
            <param name="format">format</param>
            <param name="args">args</param>
        </member>
        <member name="M:maomdlib.ConsoleLogger.Error(System.String,System.Object[])">
            <summary>
            log logic for this log level
            </summary>
            <param name="format">format</param>
            <param name="args">args</param>
        </member>
        <member name="M:maomdlib.ConsoleLogger.Information(System.String,System.Object[])">
            <summary>
            log logic for this log level
            </summary>
            <param name="format">format</param>
            <param name="args">args</param>
        </member>
        <member name="M:maomdlib.ConsoleLogger.Trace(System.String,System.Object[])">
            <summary>
            log logic for this log level
            </summary>
            <param name="format">format</param>
            <param name="args">args</param>
        </member>
        <member name="M:maomdlib.ConsoleLogger.Warning(System.String,System.Object[])">
            <summary>
            log logic for this log level
            </summary>
            <param name="format">format</param>
            <param name="args">args</param>
        </member>
        <member name="M:maomdlib.ConsoleLogger.AddLog(maomdlib.LogLevel,System.String)">
            <summary>
            add log to queue
            </summary>
            <param name="level">the level</param>
            <param name="msg">message</param>
        </member>
        <member name="F:maomdlib.ConsoleLogger.disposedValue">
            <summary>
            To detect redundant calls
            </summary>
        </member>
        <member name="M:maomdlib.ConsoleLogger.Dispose(System.Boolean)">
            <summary>
            dispose method
            </summary>
            <param name="disposing">redundant detector</param>
        </member>
        <member name="M:maomdlib.ConsoleLogger.System#IDisposable#Dispose">
            <summary>
            deconstructor
            </summary>
        </member>
        <member name="T:maomdlib.DocMaker">
            <summary>
            the main class to make documents
            </summary>
        </member>
        <member name="F:maomdlib.DocMaker._initiallized">
            <summary>
            is maker initiallized successful
            </summary>
        </member>
        <member name="F:maomdlib.DocMaker._logger">
            <summary>
            a logger to log
            </summary>
        </member>
        <member name="F:maomdlib.DocMaker._dllFile">
            <summary>
            the dll file
            </summary>
        </member>
        <member name="F:maomdlib.DocMaker._xmlFile">
            <summary>
            the xml documentation generated by visual studio
            </summary>
        </member>
        <member name="F:maomdlib.DocMaker._outputDir">
            <summary>
            out put dir, default is the name of dll file.
            </summary>
        </member>
        <member name="F:maomdlib.DocMaker._linkRoot">
            <summary>
            the root path in md system for the making documents
            </summary>
        </member>
        <member name="F:maomdlib.DocMaker._assembly">
            <summary>
            the assembly of the dll file
            </summary>
        </member>
        <member name="F:maomdlib.DocMaker._xmlnodes">
            <summary>
            the base node of xml document
            </summary>
        </member>
        <member name="M:maomdlib.DocMaker.#ctor(System.String,System.String,System.String,System.Boolean,System.String,maomdlib.ILogger)">
            <summary>
            constructor
            </summary>
            <param name="dllFile">dll file name</param>
            <param name="xmlFile">xml file name</param>
            /// <param name="isNoPath">make with path or not</param>
            <param name="outputDir">out put dir</param>
            <param name="linkRoot">md root path</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:maomdlib.DocMaker.Make">
            <summary>
            method to start make documents
            </summary>
            <returns>result</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeRootHome">
            <summary>
            make root home md
            </summary>
            <returns>sucess</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeNameSpaceHome(System.String)">
            <summary>
            make home md file for namespace
            </summary>
            <param name="ns">namespace</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeTypeFile(System.Type)">
            <summary>
            make type md file
            </summary>
            <param name="type">the type need to make</param>
        </member>
        <member name="M:maomdlib.DocMaker.MakeMDFilePath(System.Type)">
            <summary>
            make path string for a type's md file
            </summary>
            <param name="type">the type</param>
            <returns>path</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeMDFileName(System.Type)">
            <summary>
            make md filename for a type
            </summary>
            <param name="type">the type</param>
            <returns>filename</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakedName(System.Type,System.Boolean,System.Boolean)">
            <summary>
            make name string for type
            </summary>
            <param name="type">the type</param>
            <param name="prefix">need namespace prefixed</param>
            <param name="linked">need add link</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeInheritanceString(System.Type)">
            <summary>
            make a formatted string for show the inheritance of a type
            </summary>
            <param name="type">the type</param>
            <returns>inheritance string</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeParametersList(System.Reflection.MethodBase,System.Boolean,System.Boolean)">
            <summary>
            make a list string for parameters for a member info
            </summary>
            <param name="info">the info of a member</param>
            <param name="link">need add link</param>
            <param name="paramName">need add parameter name</param>
            <returns>the string</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeParametersListInNode(System.Reflection.MethodBase,System.Boolean,System.Boolean)">
            <summary>
            make a list string for parameters for a member info
            in node file
            </summary>
            <param name="info">the info of a member</param>
            <param name="link">need add link</param>
            <param name="paramName">need add parameter name</param>
            <returns>the string</returns>
            <remarks>use this to detect node in xml document</remarks>
        </member>
        <member name="M:maomdlib.DocMaker.MakeNodeName(System.Object)">
            <summary>
            build a name for a object to use in xml document
            </summary>
            <param name="obj">the object</param>
            <returns>node string</returns>
        </member>
        <member name="M:maomdlib.DocMaker.ReadXmlDocTag(System.String,System.String,System.String)">
            <summary>
            read the xml document's tag
            </summary>
            <param name="nodename">the node</param>
            <param name="tag">the tag</param>
            <param name="name">name</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeTypeInheritance(System.Type)">
            <summary>
            make a inheritance contant of a type
            </summary>
            <param name="type">the type</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeTypeAttributes(System.Type)">
            <summary>
            make attributes content of a type
            </summary>
            <param name="type">the type</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeMemberAttributes(System.Reflection.MemberInfo)">
            <summary>
            make a attributes for a member
            </summary>
            <param name="member">the member</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeTypeTags(System.Type)">
            <summary>
            make tags for a type
            </summary>
            <param name="type">the type</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeTypeShowName(System.Type)">
            <summary>
            make a show name for a type
            </summary>
            <param name="type">the type</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeTypeUsage(System.Type)">
            <summary>
            make usage string for a type
            </summary>
            <param name="type">the type</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeMemberUsage(System.Reflection.MemberInfo)">
            <summary>
            make usage string for a member
            </summary>
            <param name="memberInfo">the member info</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeGenericArgs(System.Reflection.MethodInfo)">
            <summary>
            make generic args string for member
            </summary>
            <param name="info">the member info</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeGenericArgs(System.Type)">
            <summary>
            make generic args string for type
            </summary>
            <param name="info">the type</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeMemberContent(System.Reflection.MemberInfo[])">
            <summary>
            make the content for members
            </summary>
            <param name="members">the members array</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeParamsTable(System.Reflection.MethodBase)">
            <summary>
            make params table for method
            </summary>
            <param name="method">the method</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.DocMaker.MakeArgumentsTable(System.Reflection.TypeInfo)">
            <summary>
            make args table for type info
            </summary>
            <param name="ctor">the type</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.DocMaker.CheckFiles">
            <summary>
            check files method
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:maomdlib.DocMaker.CleanDir(System.String)">
            <summary>
            clean dest dir for make new files
            </summary>
            <param name="path">the path</param>
            <returns>t/f</returns>
        </member>
        <member name="T:maomdlib.DocMaker.MakeResult">
            <summary>
            a struct for make result
            </summary>
        </member>
        <member name="F:maomdlib.DocMaker.MakeResult.code">
            <summary>
            return code
            </summary>
        </member>
        <member name="F:maomdlib.DocMaker.MakeResult.message">
            <summary>
            return message
            </summary>
        </member>
        <member name="M:maomdlib.DocMaker.MakeResult.#ctor(System.Int32,System.String)">
            <summary>
            constructor
            </summary>
            <param name="code">code</param>
            <param name="message">message</param>
        </member>
        <member name="F:maomdlib.DocMaker.disposedValue">
            <summary>
             To detect redundant calls
            </summary>
        </member>
        <member name="M:maomdlib.DocMaker.Dispose(System.Boolean)">
            <summary>
            the method
            </summary>
            <param name="disposing">redundant call detector</param>
        </member>
        <member name="M:maomdlib.DocMaker.System#IDisposable#Dispose">
            <summary>
            deconstructor
            </summary>
        </member>
        <member name="T:maomdlib.ILogger">
            <summary>
            the interface of logger
            </summary>
        </member>
        <member name="M:maomdlib.ILogger.Trace(System.String,System.Object[])">
            <summary>
            log logic for this log level
            </summary>
            <param name="format">format</param>
            <param name="args">args</param>
        </member>
        <member name="M:maomdlib.ILogger.Debug(System.String,System.Object[])">
            <summary>
            log logic for this log level
            </summary>
            <param name="format">format</param>
            <param name="args">args</param>
        </member>
        <member name="M:maomdlib.ILogger.Information(System.String,System.Object[])">
            <summary>
            log logic for this log level
            </summary>
            <param name="format">format</param>
            <param name="args">args</param>
        </member>
        <member name="M:maomdlib.ILogger.Warning(System.String,System.Object[])">
            <summary>
            log logic for this log level
            </summary>
            <param name="format">format</param>
            <param name="args">args</param>
        </member>
        <member name="M:maomdlib.ILogger.Error(System.String,System.Object[])">
            <summary>
            log logic for this log level
            </summary>
            <param name="format">format</param>
            <param name="args">args</param>
        </member>
        <member name="M:maomdlib.ILogger.Critical(System.String,System.Object[])">
            <summary>
            log logic for this log level
            </summary>
            <param name="format">format</param>
            <param name="args">args</param>
        </member>
        <member name="P:maomdlib.ILogger.MinLogLevel">
            <summary>
            the minimize level to log
            </summary>
        </member>
        <member name="T:maomdlib.LogLevel">
            <summary>
            the enum for log level
            </summary>
        </member>
        <member name="F:maomdlib.LogLevel.Trace">
            <summary>
            trace
            </summary>
        </member>
        <member name="F:maomdlib.LogLevel.Debug">
            <summary>
            debug
            </summary>
        </member>
        <member name="F:maomdlib.LogLevel.Information">
            <summary>
            information
            </summary>
        </member>
        <member name="F:maomdlib.LogLevel.Warning">
            <summary>
            warning
            </summary>
        </member>
        <member name="F:maomdlib.LogLevel.Error">
            <summary>
            error
            </summary>
        </member>
        <member name="F:maomdlib.LogLevel.Critical">
            <summary>
            critical
            </summary>
        </member>
        <member name="T:maomdlib.MarkDownContent">
            <summary>
            a type for markdown content
            </summary>
        </member>
        <member name="F:maomdlib.MarkDownContent._content">
            <summary>
            the content
            </summary>
        </member>
        <member name="P:maomdlib.MarkDownContent.Length">
            <summary>
            length for content
            </summary>
        </member>
        <member name="M:maomdlib.MarkDownContent.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="content">content</param>
        </member>
        <member name="M:maomdlib.MarkDownContent.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:maomdlib.MarkDownContent.op_Implicit(maomdlib.MarkDownContent)~System.String">
            <summary>
            some operation
            </summary>
            <param name="a">a</param>
        </member>
        <member name="M:maomdlib.MarkDownContent.op_Addition(maomdlib.MarkDownContent,maomdlib.MarkDownContent)">
            <summary>
            some operation
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns></returns>
        </member>
        <member name="M:maomdlib.MarkDownContent.op_Addition(System.String,maomdlib.MarkDownContent)">
            <summary>
            some operation
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns></returns>
        </member>
        <member name="M:maomdlib.MarkDownContent.op_Addition(maomdlib.MarkDownContent,System.String)">
            <summary>
            some operation
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns></returns>
        </member>
        <member name="M:maomdlib.MarkDownContent.op_Increment(maomdlib.MarkDownContent)">
            <summary>
            some operation to add a new line
            </summary>
            <param name="a">a</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.MarkDownContent.op_Multiply(maomdlib.MarkDownContent,System.String)">
            <summary>
            some operation add two new lines and some content
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.MarkDownContent.op_Division(maomdlib.MarkDownContent,System.String)">
            <summary>
            some operation add one new line and some content
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns>content</returns>
        </member>
        <member name="M:maomdlib.MarkDownContent.ToString">
            <summary>
            convertor to string
            </summary>
            <returns>string</returns>
        </member>
    </members>
</doc>
